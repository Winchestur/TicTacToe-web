User Related
	Register/Login
		create login/register views	=> DONE
		create user entity / binding models for login/register => DONE
		validate login/register => DONE
	
	Personal Settings
		Create user panel with options on the right. => DONE
		Change password  => DONE
		Change language  => DONE
		/*Remove account*/
		
	Functionality
		User cannot register with existing username/email => DONE
		Upon successful login, language should be set to the user's chosen lang. => DONE
		
	Validations
		register
			unique username/email => DONE
			username may only contain letters, digits, dash and underscore   => DONE
			password length at least 6 characters   => DONE
			valid email format - digitsNumbers@domain.suffix => DONE
			password and confirm password should match => DONE
			
		login
			create custom constraint "@ValidPassword" that will validate the password using BCrypt => DONE
			
		locale
			translate above mentioned validation error messages => DONE
		
		html
			all errors should be displayed under their respective field. => DONE
			
Design
	Night Mode
		Functionality
			create a switch that changes the page from white to dark and the opposite.
			
		Requirements
			mode switching should not reload the page
			mode preference should be preserved in local storage
			
	/*Add more design features here*/
	
Online Users
	Back End
		create OnlineUser Entity
		create cron job for filtering online users
		create online user service/controller
		put users online/offline on login/logout
		
	Front End
		create online users section in the sidebar
			/*construct the html so it is easy to send invites to those players*/
		send keep alive request once every N seconds to keep user alive
		send request to get online users once every N seconds and display them
		/*Replace setInterval requests with socket*** */

Game Invites
	Back End
		create GameInvite Entity
		create cron job for filtering expired invites
		create game invite service/controller in REST fashion
		
	Front End
		create game invites section in the sidebar
		refresh invites every N seconds
		accepting/declining invite should send ajax call to the server
		when sending invite, create a listener for that invite to see if it is accepted/declined
		/*Replace setInterval with socket for refreshing invites and listening your sent invite*** */
		
	Constraints
		palyer can only send 1 invite at a time
		player a cannot send invite to player b if player b has already sent an invite
		player cannot accept invite if he is in game


		